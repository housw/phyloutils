#!/usr/bin/env python

###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Shengwei Hou"
__copyright__ = "Copyright 2018"
__credits__ = ["Shengwei Hou"]
__license__ = "GPL3"
__maintainer__ = "Shengwei Hou"
__email__ = "housw2010@gmail.com"
__status__ = "Development"


import sys
import argparse
import logging
from phyloutils import itermodules
from phyloutils.main import setup_logging
from phyloutils.main import display_help
from phyloutils import __version__


_logger = logging.getLogger('phyloutils')


def parse_args(argv):
    """Parse command line parameters

    Args:
      args ([str]): command line parameters as list of strings, the first is subcommand

    Returns:
      :obj:`argparse.Namespace`: subcommand and arguments
    """

    # main parser
    parser = argparse.ArgumentParser(
        description="phyloutils: A set of subcommands for phylogenetic "\
        "computation.", prog="phyloutils")

    parser.add_argument('--version', action='version',
        version='phyloUtils {ver}'.format(ver=__version__))

    # parent parser, to specify shared arguments, inherited by subparsers
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument("-p", "--prefix", required=False,
        help="output prefix")
    parent_parser.add_argument('-v', '--verbosity', dest="verbosity",
        help="logging verbosity level, choose from ['debug', 'info', "\
            "'warning', 'error', 'critical'], default='info'",
        default='info')

    # subparsers
    subparsers = parser.add_subparsers(help='available subcommands', dest='subparser_name')

    # Add actions
    commands = {}
    for name, mod in itermodules():
        subparser = subparsers.add_parser(name, help=mod.__doc__,
                description=mod.__doc__, parents=[parent_parser])
        subparser = mod.add_arguments(subparser)
        try:
            commands[name] = mod.command
        except Exception as err:
            _logger.error(" %s need to implement a command method!"%name)
            raise NotImplementedError(err)

    # display help
    display_help(sys.argv, parser)

    arguments = parser.parse_args(argv)
    #arguments.argv = argv
    command = arguments.subparser_name

    return commands[command], arguments


def setup_logging(log_level, log_file="phyloutils.log", file_mode="w", console=True):
    """ basic root logger configuration
    :param log_level: critical, error, warning, info or debug
    :param log_file:  where the logging message write to
    :param file_mode: 'a' for append, 'w' for overwrite
    :return: None
    """

    # get log_level, default is logging.DEBUG
    log_level = {
        'critical': logging.CRITICAL,
        'error'   : logging.ERROR,
        'warning' : logging.WARNING,
        'info'    : logging.INFO,
        'debug'   : logging.DEBUG,
    }.get(log_level, logging.DEBUG)

    # stream handler logging to sys.stdout
    console_handler = logging.StreamHandler(sys.stdout)

    # file handler logging to log_file
    file_handler = logging.FileHandler(filename=log_file, mode=file_mode)

    # set up logging and date format, add handlers to root logger
    log_format = logging.Formatter('[%(asctime)s] [%(levelname)s] %(name)s:%(message)s')
    date_format = "%Y-%m-%d %H:%M:%S"
    for handler in [console_handler, file_handler]:
        handler.setFormatter(log_format)
        handler.setLevel(log_level)

    # initialize the root logger
    if console:
        logging.basicConfig(level=log_level, handlers=[console_handler, file_handler],
                            format=log_format, datefmt=date_format)
    else:
        logging.basicConfig(level=log_level, handlers=[file_handler],
                            format=log_format, datefmt=date_format)


def main(argv):
    """Main entry point allowing external calls

    Args:
      args ([str]): command line parameter list
    """

    # setup basic logging
    setup_logging(log_level=logging.DEBUG, log_file="phyloutils.log", file_mode="w", console=True)

    # parse subcomand and arguments
    command, arguments = parse_args(argv)

    # set up logger according to input arguments
    setup_logging(arguments.verbosity)

    # job dispatch
    _logger.debug("Starting job dispatch ...")
    return command(arguments)
    _logger.info("Job finished")


if __name__ == "__main__":
    main(sys.argv[1:])




